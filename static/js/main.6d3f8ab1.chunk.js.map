{"version":3,"sources":["redux/constants/actionTypes.js","api/http-common.js","api/index.js","components/weatherLogic/IconWeather.js","components/weatherLogic/CardTemperature.js","components/weatherLogic/LocationMap.js","components/weatherLogic/WeatherCard.js","components/weatherLogic/WetherEngine.js","redux/actions/weather.js","components/countriesArray.js","components/SelectCountry.js","redux/actions/countries.js","App.js","redux/reduers/weather.js","redux/reduers/countries.js","redux/reduers/rootReducer.js","redux/store/store.js","index.js"],"names":["FETCH_WEATHERAPI_REQUEST","FETCH_WEATHERAPI_SUCCESS","FETCH_WEATHERAPI_FAILURE","GET_COUNTRY","axios","create","baseURL","headers","city","http","get","process","IconWeather","props","icon","condition","src","alt","useStyles","makeStyles","theme","root","media","height","paddingTop","expand","transform","marginLeft","transition","transitions","duration","shortest","expandOpen","avatar","backgroundColor","red","contexClass","textAlign","fontSize","imageClasses","margin","contexClassDescription","CardTemperature","temp","pressure","description","sunrise","sunset","wind","feelslike","classes","Card","className","CardHeader","Avatar","aria-label","action","IconButton","title","moment","format","subheader","CardContent","style","background","highColor","lowColor","Math","ceil","weatherConditions","color","Typography","variant","component","toUpperCase","CardActions","disableSpacing","AnyReactComponent","text","Component","weatherClass","WeatherCard","item","console","log","coord","lon","Grid","sm","name","sys","country","Box","m","main","weather","speed","feels_like","WetherEngine","wether","useSelector","state","dispatch","useDispatch","useEffect","a","type","WeatherAPI","fetchAPI","data","payload","error","getWeather","xs","container","justify","loading","countriesArray","id","img","cities","button","display","marginTop","spacing","formControl","minWidth","imageWeather","width","imageWeatherContainer","SelectCountry","selectCities","useState","countryId","setCountryId","setCity","open","setOpen","openCity","setOpenCity","getCountry","md","FormControl","InputLabel","Select","labelId","value","onClose","onOpen","onChange","e","prevState","target","map","MenuItem","index","length","App","CssBaseline","Container","maxWidth","initialState","items","rootReducer","combineReducers","composedEnhancer","composeWithDevTools","applyMiddleware","thunkMiddleware","store","createStore","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6d3f8ab1.chunk.js","sourcesContent":["export const FETCH_WEATHERAPI_REQUEST = 'FETCH_WEATHERAPI_REQUEST';\r\nexport const FETCH_WEATHERAPI_SUCCESS = 'FETCH_WEATHERAPI_SUCCESS';\r\nexport const FETCH_WEATHERAPI_FAILURE = 'FETCH_WEATHERAPI_FAILURE';\r\n\r\nexport const GET_COUNTRY = 'GET_COUNTRY';\r\n","import axios from 'axios';\r\n\r\nexport default axios.create({\r\n\tbaseURL: 'https://api.openweathermap.org/data/2.5/weather',\r\n\theaders: {\r\n\t\t'Content-type': 'application/json',\r\n\t},\r\n});\r\n","import http from './http-common';\r\n\r\nconst apiId = process.env.REACT_APP_API_KEY;\r\n\r\nclass WeatherAPI {\r\n\tfetchAPI(city) {\r\n\t\treturn http.get(`/?uk&units=metric&appid=${apiId}&q=${city}`);\r\n\t}\r\n}\r\n\r\nexport default new WeatherAPI();\r\n","import React from 'react';\r\n\r\nconst IconWeather = (props) => {\r\n\tlet icon = '';\r\n\tswitch (props.condition) {\r\n\t\tcase 'Clouds':\r\n\t\t\ticon = `./image/Mostly Cloudy-2x.png`;\r\n\t\t\tbreak;\r\n\t\tcase 'Clear':\r\n\t\t\ticon = `./image/Mostly Sunny-2x.png`;\r\n\t\t\tbreak;\r\n\t\tcase 'Haze':\r\n\t\t\ticon = `./image/Haze-2x.png`;\r\n\t\t\tbreak;\r\n\t\tcase 'Hail':\r\n\t\t\ticon = `./image/Hail-2x.png`;\r\n\t\t\tbreak;\r\n\t\tcase 'Fog':\r\n\t\t\ticon = `./image/Fog-2x.png`;\r\n\t\t\tbreak;\r\n\t\tcase 'Tornado':\r\n\t\t\ticon = `./image/Tornado-2x.png`;\r\n\t\t\tbreak;\r\n\t\tcase 'Dust':\r\n\t\t\ticon = `./image/Dust-2x.png`;\r\n\t\t\tbreak;\r\n\t\tcase 'Mist':\r\n\t\t\ticon = `./image/Fog-2x.png`;\r\n\t\t\tbreak;\r\n\t\tcase 'Snow':\r\n\t\t\ticon = `./image/Snow-2x.png`;\r\n\t\t\tbreak;\r\n\t\tcase 'Rain':\r\n\t\t\ticon = `./image/Rain-2x.png`;\r\n\t\t\tbreak;\r\n\t\tcase 'Drizzle':\r\n\t\t\ticon = `./image/Drizzle-2x.png`;\r\n\t\t\tbreak;\r\n\t\tcase 'Thunderstorm':\r\n\t\t\ticon = `./image/Severe Thunderstorm-2x.png`;\r\n\t\t\tbreak;\r\n\t\tdefault:\r\n\t\t\ticon = `./image/Fog-2x.png`;\r\n\t\t\tbreak;\r\n\t}\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<img src={icon} alt='weather condition' />\r\n\t\t</>\r\n\t);\r\n};\r\n\r\nexport default IconWeather;\r\n","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { red } from '@material-ui/core/colors';\r\nimport {\r\n\tCard,\r\n\tCardHeader,\r\n\tTypography,\r\n\tIconButton,\r\n\tAvatar,\r\n\tCardContent,\r\n\tCardActions,\r\n} from '@material-ui/core';\r\nimport CenterFocusWeakTwoToneIcon from '@material-ui/icons/CenterFocusWeakTwoTone';\r\nimport moment from 'moment';\r\nimport IconWeather from './IconWeather';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n\troot: {\r\n\t\t// maxWidth: 345,\r\n\t},\r\n\tmedia: {\r\n\t\theight: 0,\r\n\t\tpaddingTop: '56.25%', // 16:9\r\n\t},\r\n\texpand: {\r\n\t\ttransform: 'rotate(0deg)',\r\n\t\tmarginLeft: 'auto',\r\n\t\ttransition: theme.transitions.create('transform', {\r\n\t\t\tduration: theme.transitions.duration.shortest,\r\n\t\t}),\r\n\t},\r\n\texpandOpen: {\r\n\t\ttransform: 'rotate(180deg)',\r\n\t},\r\n\tavatar: {\r\n\t\tbackgroundColor: red[500],\r\n\t},\r\n\tcontexClass: {\r\n\t\ttextAlign: 'center',\r\n\t\tfontSize: '60px',\r\n\t},\r\n\timageClasses: {\r\n\t\ttextAlign: 'center',\r\n\t\tmargin: '70px',\r\n\t},\r\n\tcontexClassDescription: {\r\n\t\ttextAlign: 'center',\r\n\t\tfontSize: '40px',\r\n\t},\r\n}));\r\n\r\nconst CardTemperature = ({\r\n\ttemp,\r\n\tpressure,\r\n\tsunrise,\r\n\tsunset,\r\n\tdescription,\r\n\twind,\r\n\tfeelslike,\r\n\tcondition,\r\n}) => {\r\n\tconst classes = useStyles();\r\n\t// The weatherConditions function is used to determine the background color in the red spectrum\r\n\tconst weatherConditions = (temp) => {\r\n\t\tlet highColor = 0;\r\n\t\tlet lowColor = 0;\r\n\t\tlet bg = null;\r\n\r\n\t\t// logic if 12 represent 0 , 46 represent 1\r\n\t\tif (temp > 12) {\r\n\t\t\thighColor = Math.ceil((1 - (temp - 12) / 34) * 255);\r\n\t\t\treturn `linear-gradient(to top, rgb(255,${highColor},0), rgb(255,${lowColor},0))`;\r\n\t\t} else if (temp <= 12) {\r\n\t\t\t// logic if -20 represent 0 , 12 represent 1\r\n\t\t\thighColor = Math.ceil((1 - (temp + 20) / 32) * 255);\r\n\t\t\tlowColor = highColor - 150;\r\n\t\t\treturn `linear-gradient(to top, rgb(0,${highColor},255), rgb(0,${lowColor},255))`;\r\n\t\t}\r\n\t};\r\n\r\n\treturn (\r\n\t\t<Card className={classes.root}>\r\n\t\t\t<CardHeader\r\n\t\t\t\tavatar={\r\n\t\t\t\t\t<Avatar aria-label='recipe' className={classes.avatar}>\r\n\t\t\t\t\t\tT\r\n\t\t\t\t\t</Avatar>\r\n\t\t\t\t}\r\n\t\t\t\taction={\r\n\t\t\t\t\t<IconButton aria-label='settings'>\r\n\t\t\t\t\t\t<CenterFocusWeakTwoToneIcon />\r\n\t\t\t\t\t</IconButton>\r\n\t\t\t\t}\r\n\t\t\t\ttitle={`${moment().format('MMM D YYYY')}`}\r\n\t\t\t\tsubheader=''\r\n\t\t\t/>\r\n\t\t\t<CardContent\r\n\t\t\t\tstyle={{\r\n\t\t\t\t\tbackground: weatherConditions(temp),\r\n\t\t\t\t\tcolor: '#ffffff',\r\n\t\t\t\t}}\r\n\t\t\t>\r\n\t\t\t\t<Typography\r\n\t\t\t\t\tvariant='body2'\r\n\t\t\t\t\tcomponent='p'\r\n\t\t\t\t\tclassName={classes.contexClass}\r\n\t\t\t\t>\r\n\t\t\t\t\t{temp} &#8451;\r\n\t\t\t\t</Typography>\r\n\t\t\t\t<Typography\r\n\t\t\t\t\tvariant='body1'\r\n\t\t\t\t\tcomponent='p'\r\n\t\t\t\t\tclassName={classes.contexClassDescription}\r\n\t\t\t\t>\r\n\t\t\t\t\t{description.toUpperCase()}\r\n\t\t\t\t</Typography>\r\n\t\t\t\t<Typography\r\n\t\t\t\t\tvariant='body2'\r\n\t\t\t\t\tcomponent='p'\r\n\t\t\t\t\tclassName={classes.imageClasses}\r\n\t\t\t\t>\r\n\t\t\t\t\t<IconWeather condition={condition} />\r\n\t\t\t\t</Typography>\r\n\t\t\t\t<Typography variant='body2' component='p'>\r\n\t\t\t\t\tAtmospheric pressure: {pressure} hPa\r\n\t\t\t\t</Typography>\r\n\t\t\t\t<Typography variant='body2' component='p'>\r\n\t\t\t\t\tWind speed: {wind} m/s\r\n\t\t\t\t</Typography>\r\n\t\t\t\t<Typography variant='body2' component='p'>\r\n\t\t\t\t\tFeels Like: {feelslike} &#8451;\r\n\t\t\t\t</Typography>\r\n\t\t\t\t{/* <Typography variant='body2' component='p'>\r\n\t\t\t\t\tSunrise time: {moment.unix(sunrise).format('HH:mm')}\r\n\t\t\t\t</Typography>\r\n\t\t\t\t<Typography variant='body2' component='p'>\r\n\t\t\t\t\tSunset time: {moment.unix(sunset).format('HH:mm')}\r\n\t\t\t\t</Typography> */}\r\n\t\t\t\t<p>{condition}</p>\r\n\t\t\t</CardContent>\r\n\t\t\t<CardActions disableSpacing></CardActions>\r\n\t\t</Card>\r\n\t);\r\n};\r\n\r\nexport default CardTemperature;\r\n","import React, { Component } from 'react';\r\nimport GoogleMapReact from 'google-map-react';\r\n\r\nconst AnyReactComponent = ({ text }) => <div>{text}</div>;\r\n\r\nclass LocationMap extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tcenter: {\r\n\t\t\t\tlat: 59.95,\r\n\t\t\t\tlng: 30.33,\r\n\t\t\t},\r\n\t\t};\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tthis.setState({\r\n\t\t\tcenter: {\r\n\t\t\t\tlat: this.props.lat,\r\n\t\t\t\tlng: this.props.lng,\r\n\t\t\t},\r\n\t\t});\r\n\t}\r\n\r\n\trender() {\r\n\t\tconsole.log(this.props);\r\n\t\treturn (\r\n\t\t\t<div style={{ height: '400px', width: '100%' }}>\r\n\t\t\t\t<GoogleMapReact\r\n\t\t\t\t\t// bootstrapURLKeys={{ key: process.env.GOOGLE_MAPS_API_KEY }}\r\n\t\t\t\t\tbootstrapURLKeys={{ key: 'AIzaSyCZSY4AW-l1ZkR828vnBpf3F3j9fhe7g6A' }}\r\n\t\t\t\t\tdefaultCenter={this.state.center}\r\n\t\t\t\t\tdefaultZoom={8}\r\n\t\t\t\t>\r\n\t\t\t\t\t<AnyReactComponent lat={59.955413} lng={30.337844} text='My Marker' />\r\n\t\t\t\t</GoogleMapReact>\r\n\t\t\t</div>\r\n\t\t\t// <div>ppp</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default LocationMap;\r\n","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Grid, Typography, Box } from '@material-ui/core';\r\nimport CardTemperature from './CardTemperature';\r\nimport LocationMap from './LocationMap';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n\tweatherClass: {\r\n\t\tmargin: 40,\r\n\t},\r\n}));\r\n\r\nconst WeatherCard = ({ item }) => {\r\n\tconst classes = useStyles();\r\n\r\n\tconsole.log('item component', item.coord.lon);\r\n\treturn (\r\n\t\t<Grid item sm={12} className={classes.weatherClass}>\r\n\t\t\t<Typography variant='h5' component='p'>\r\n\t\t\t\tCity : {item.name}\r\n\t\t\t</Typography>\r\n\t\t\t<Typography variant='h5' component='p'>\r\n\t\t\t\tCountry : {item.sys.country}\r\n\t\t\t</Typography>\r\n\t\t\t<Box component='span' m={1}>\r\n\t\t\t\t<CardTemperature\r\n\t\t\t\t\ttemp={item.main.temp}\r\n\t\t\t\t\tpressure={item.main.pressure}\r\n\t\t\t\t\tsunrise={item.sys.sunrise}\r\n\t\t\t\t\tsunset={item.sys.sunset}\r\n\t\t\t\t\tdescription={item.weather[0].description}\r\n\t\t\t\t\twind={item.wind.speed}\r\n\t\t\t\t\tfeelslike={item.main.feels_like}\r\n\t\t\t\t\tcondition={item.weather[0].main}\r\n\t\t\t\t/>\r\n\t\t\t</Box>\r\n\t\t\t{/* <Box component='span' m={1}>\r\n\t\t\t\t<Typography variant='body1' component='p'>\r\n\t\t\t\t\tCity geo location, longitude : {item.coord.lon}\r\n\t\t\t\t</Typography>\r\n\t\t\t\t<Typography variant='body1' component='p'>\r\n\t\t\t\t\tCity geo location, latitude : {item.coord.lat}\r\n\t\t\t\t</Typography>\r\n\t\t\t</Box> */}\r\n\t\t\t{/* <LocationMap lng={item.coord.lon} lat={item.coord.lat} /> */}\r\n\t\t</Grid>\r\n\t);\r\n};\r\n\r\nexport default WeatherCard;\r\n","import React, { useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { getWeather } from '../../redux/actions/weather';\r\nimport { Grid, Typography } from '@material-ui/core';\r\nimport WeatherCard from './WeatherCard';\r\n\r\nconst WetherEngine = ({ city }) => {\r\n\tconst wether = useSelector((state) => state.weather);\r\n\tconst dispatch = useDispatch();\r\n\r\n\tuseEffect(() => {\r\n\t\tdispatch(getWeather(city));\r\n\t}, [city, dispatch]);\r\n\r\n\treturn (\r\n\t\t<Grid item xs={12} container justify='center'>\r\n\t\t\t{wether.error ? (\r\n\t\t\t\t<Typography variant='h5' component='p'>\r\n\t\t\t\t\tSomething went wrong\r\n\t\t\t\t</Typography>\r\n\t\t\t) : wether.loading ? (\r\n\t\t\t\t<Typography variant='h5' component='p'>\r\n\t\t\t\t\tLoading...\r\n\t\t\t\t</Typography>\r\n\t\t\t) : (\r\n\t\t\t\t<WeatherCard item={wether.item} />\r\n\t\t\t)}\r\n\t\t</Grid>\r\n\t);\r\n};\r\n\r\nexport default WetherEngine;\r\n","import {\r\n\tFETCH_WEATHERAPI_REQUEST,\r\n\tFETCH_WEATHERAPI_SUCCESS,\r\n\tFETCH_WEATHERAPI_FAILURE,\r\n} from '../constants/actionTypes';\r\nimport WeatherAPI from '../../api/index';\r\n\r\nexport const getWeather = (city) => async (dispatch) => {\r\n\tdispatch({ type: FETCH_WEATHERAPI_REQUEST });\r\n\ttry {\r\n\t\tconst { data } = await WeatherAPI.fetchAPI(city);\r\n\t\tdispatch({ type: FETCH_WEATHERAPI_SUCCESS, payload: data });\r\n\t} catch (error) {\r\n\t\tdispatch({ type: FETCH_WEATHERAPI_FAILURE, error: error });\r\n\t}\r\n};\r\n","const countriesArray = [\r\n\t{\r\n\t\tid: 0,\r\n\t\tcountry: 'Serbia',\r\n\t\timg: 'serbia.png',\r\n\t\tcities: ['Belgrade'],\r\n\t},\r\n\t{\r\n\t\tid: 1,\r\n\t\tcountry: 'Australia',\r\n\t\timg: 'australia.png',\r\n\t\tcities: ['Sydney', 'Perth', 'Brisbane', 'Melbourne', 'Adelaide'],\r\n\t},\r\n\t{\r\n\t\tid: 2,\r\n\t\tcountry: 'China',\r\n\t\timg: 'china.png',\r\n\t\tcities: [\r\n\t\t\t'Beijing',\r\n\t\t\t'Macau',\r\n\t\t\t'Shanghai',\r\n\t\t\t'Chongqing',\r\n\t\t\t'Tianjin',\r\n\t\t\t'Anqing',\r\n\t\t\t'Bengbu',\r\n\t\t\t'Bozhou',\r\n\t\t\t'Chaohu',\r\n\t\t\t'Huaibei',\r\n\t\t\t'Huangshan',\r\n\t\t\t'Wuhu',\r\n\t\t\t'Dingxi',\r\n\t\t],\r\n\t},\r\n\t{\r\n\t\tid: 3,\r\n\t\tcountry: 'Russia',\r\n\t\timg: 'russia.png',\r\n\t\tcities: [\r\n\t\t\t'Moscow',\r\n\t\t\t'Saint Petersburg',\r\n\t\t\t'Kazan',\r\n\t\t\t'Novosibirsk',\r\n\t\t\t'Yekaterinburg',\r\n\t\t\t'Kazan',\r\n\t\t\t'Nizhny Novgorod',\r\n\t\t\t'Samara',\r\n\t\t],\r\n\t},\r\n\t{\r\n\t\tid: 4,\r\n\t\tcountry: 'UK',\r\n\t\timg: 'uk.png',\r\n\t\tcities: [\r\n\t\t\t'London',\r\n\t\t\t'Manchester',\r\n\t\t\t'Birmingham',\r\n\t\t\t'Bristol',\r\n\t\t\t'Cambridge',\r\n\t\t\t'Canterbury',\r\n\t\t\t'Cardiff',\r\n\t\t\t'Chester',\r\n\t\t\t'Derby',\r\n\t\t],\r\n\t},\r\n\t{\r\n\t\tid: 5,\r\n\t\tcountry: 'USA',\r\n\t\timg: 'usa.png',\r\n\t\tcities: [\r\n\t\t\t'New York',\r\n\t\t\t'Los Angeles',\r\n\t\t\t'Chicago',\r\n\t\t\t'Phoenix',\r\n\t\t\t'Dallas',\r\n\t\t\t'Washington',\r\n\t\t\t'Boston',\r\n\t\t\t'Oklahoma City',\r\n\t\t],\r\n\t},\r\n\t{\r\n\t\tid: 6,\r\n\t\tcountry: 'Germany',\r\n\t\timg: 'germany.png',\r\n\t\tcities: [\r\n\t\t\t'Berlin',\r\n\t\t\t'Hamburg',\r\n\t\t\t'Munich',\r\n\t\t\t'Cologne',\r\n\t\t\t'Stuttgart',\r\n\t\t\t'Düsseldorf',\r\n\t\t\t'Dortmund',\r\n\t\t\t'Remscheid',\r\n\t\t\t'Kaiserslautern',\r\n\t\t],\r\n\t},\r\n\t{\r\n\t\tid: 7,\r\n\t\tcountry: 'France',\r\n\t\timg: 'france.png',\r\n\t\tcities: [\r\n\t\t\t'Paris',\r\n\t\t\t'Marseille',\r\n\t\t\t'Lyon',\r\n\t\t\t'Lille',\r\n\t\t\t'Strasbourg',\r\n\t\t\t'Nantes',\r\n\t\t\t'Toulouse',\r\n\t\t\t'Le Havre',\r\n\t\t\t'Dijon',\r\n\t\t],\r\n\t},\r\n];\r\n\r\nexport default countriesArray;\r\n","import React, { useState, useEffect } from 'react';\r\nimport {\r\n\tGrid,\r\n\tTypography,\r\n\tFormControl,\r\n\tSelect,\r\n\tInputLabel,\r\n\tMenuItem,\r\n} from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport WetherEngine from './weatherLogic/WetherEngine';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { getCountry } from '../redux/actions/countries';\r\nimport countriesArray from './countriesArray';\r\nimport LocationOnIcon from '@material-ui/icons/LocationOn';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n\tbutton: {\r\n\t\tdisplay: 'block',\r\n\t\tmarginTop: theme.spacing(2),\r\n\t},\r\n\tformControl: {\r\n\t\tmargin: theme.spacing(1),\r\n\t\tminWidth: 120,\r\n\t},\r\n\timageWeather: {\r\n\t\twidth: '70%',\r\n\t},\r\n\timageWeatherContainer: {\r\n\t\ttextAlign: 'center',\r\n\t},\r\n}));\r\n\r\nconst SelectCountry = () => {\r\n\tconst selectCities = useSelector((state) => state.country);\r\n\tconst dispatch = useDispatch();\r\n\r\n\tconst classes = useStyles();\r\n\tconst [countryId, setCountryId] = useState(0);\r\n\tconst [city, setCity] = useState('');\r\n\tconst [open, setOpen] = useState(false);\r\n\tconst [openCity, setOpenCity] = useState(false);\r\n\r\n\tuseEffect(() => {\r\n\t\tdispatch(getCountry(countryId));\r\n\t}, [countryId]);\r\n\r\n\tconst handleCountry = (e) => {\r\n\t\tsetCountryId((prevState) => {\r\n\t\t\treturn (prevState = e.target.value);\r\n\t\t});\r\n\t\tsetCity('');\r\n\t};\r\n\r\n\tconst handleClose = () => {\r\n\t\tsetOpen(false);\r\n\t};\r\n\r\n\tconst handleOpen = () => {\r\n\t\tsetOpen(true);\r\n\t};\r\n\r\n\tconst handleCloseCity = () => {\r\n\t\tsetOpenCity(false);\r\n\t};\r\n\r\n\tconst handleOpenCity = () => {\r\n\t\tsetOpenCity(true);\r\n\t};\r\n\r\n\tconst handleCity = (e) => {\r\n\t\tsetCity((prevState) => {\r\n\t\t\treturn (prevState = e.target.value);\r\n\t\t});\r\n\t};\r\n\r\n\treturn (\r\n\t\t<Grid container>\r\n\t\t\t<Grid item xs={12}>\r\n\t\t\t\t<Typography variant='h4' component='h4'>\r\n\t\t\t\t\tAPI from https://openweathermap.org\r\n\t\t\t\t</Typography>\r\n\t\t\t</Grid>\r\n\t\t\t<Grid item sm={12} md={3}>\r\n\t\t\t\t<Typography variant='h5' component='h5'>\r\n\t\t\t\t\tChoose a country\r\n\t\t\t\t</Typography>\r\n\r\n\t\t\t\t<form>\r\n\t\t\t\t\t<FormControl className={classes.formControl}>\r\n\t\t\t\t\t\t<InputLabel id='demo-controlled-open-select-label'>\r\n\t\t\t\t\t\t\tCountry\r\n\t\t\t\t\t\t</InputLabel>\r\n\t\t\t\t\t\t<Select\r\n\t\t\t\t\t\t\tlabelId='demo-controlled-open-select-label'\r\n\t\t\t\t\t\t\tid='demo-controlled-open-select'\r\n\t\t\t\t\t\t\topen={open}\r\n\t\t\t\t\t\t\tvalue={countryId}\r\n\t\t\t\t\t\t\tonClose={handleClose}\r\n\t\t\t\t\t\t\tonOpen={handleOpen}\r\n\t\t\t\t\t\t\tonChange={handleCountry}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t{countriesArray.map((item) => {\r\n\t\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t\t<MenuItem value={`${item.id}`} key={item.id}>\r\n\t\t\t\t\t\t\t\t\t\t<img\r\n\t\t\t\t\t\t\t\t\t\t\tsrc={process.env.PUBLIC_URL + `/flags/${item.img}`}\r\n\t\t\t\t\t\t\t\t\t\t\talt='a'\r\n\t\t\t\t\t\t\t\t\t\t/>{' '}\r\n\t\t\t\t\t\t\t\t\t\t{item.country}\r\n\t\t\t\t\t\t\t\t\t</MenuItem>\r\n\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t})}\r\n\t\t\t\t\t\t</Select>\r\n\t\t\t\t\t</FormControl>\r\n\t\t\t\t\t{!selectCities.cities ? (\r\n\t\t\t\t\t\t<p>Load...</p>\r\n\t\t\t\t\t) : (\r\n\t\t\t\t\t\t<FormControl className={classes.formControl}>\r\n\t\t\t\t\t\t\t<InputLabel id='demo-controlled-open-select-label'>\r\n\t\t\t\t\t\t\t\tCity\r\n\t\t\t\t\t\t\t</InputLabel>\r\n\t\t\t\t\t\t\t<Select\r\n\t\t\t\t\t\t\t\tlabelId='demo-controlled-open-select-label'\r\n\t\t\t\t\t\t\t\tid='demo-controlled-open-select'\r\n\t\t\t\t\t\t\t\topen={openCity}\r\n\t\t\t\t\t\t\t\tvalue={city}\r\n\t\t\t\t\t\t\t\tonClose={handleCloseCity}\r\n\t\t\t\t\t\t\t\tonOpen={handleOpenCity}\r\n\t\t\t\t\t\t\t\tonChange={handleCity}\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t{selectCities.cities.map((city, index) => {\r\n\t\t\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t\t\t<MenuItem value={`${city}`} key={index}>\r\n\t\t\t\t\t\t\t\t\t\t\t<LocationOnIcon /> {city}\r\n\t\t\t\t\t\t\t\t\t\t</MenuItem>\r\n\t\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\t})}\r\n\t\t\t\t\t\t\t</Select>\r\n\t\t\t\t\t\t</FormControl>\r\n\t\t\t\t\t)}\r\n\t\t\t\t</form>\r\n\t\t\t</Grid>\r\n\t\t\t<Grid item sm={12} md={9} container>\r\n\t\t\t\t{city.length > 0 ? <WetherEngine city={city} /> : <p></p>}\r\n\t\t\t</Grid>\r\n\t\t</Grid>\r\n\t);\r\n};\r\n\r\nexport default SelectCountry;\r\n","import { GET_COUNTRY } from '../constants/actionTypes';\r\nimport countriesArray from '../../components/countriesArray';\r\n\r\nexport const getCountry = (countryId) => {\r\n\treturn {\r\n\t\ttype: GET_COUNTRY,\r\n\t\tpayload: countriesArray[countryId],\r\n\t};\r\n};\r\n","import React from 'react';\nimport { CssBaseline, Container } from '@material-ui/core';\nimport SelectCountry from './components/SelectCountry';\n\nfunction App() {\n\treturn (\n\t\t<div className='App'>\n\t\t\t<CssBaseline />\n\t\t\t<Container maxWidth='md'>\n\t\t\t\t<SelectCountry />\n\t\t\t</Container>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","import {\r\n\tFETCH_WEATHERAPI_REQUEST,\r\n\tFETCH_WEATHERAPI_SUCCESS,\r\n\tFETCH_WEATHERAPI_FAILURE,\r\n} from '../constants/actionTypes';\r\n\r\nconst initialState = {\r\n\titem: {},\r\n\tloading: true,\r\n\terror: null,\r\n};\r\n\r\nexport default function weatherReducer(state = initialState, action) {\r\n\tswitch (action.type) {\r\n\t\tcase FETCH_WEATHERAPI_REQUEST:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tloading: true,\r\n\t\t\t\terror: null,\r\n\t\t\t};\r\n\t\tcase FETCH_WEATHERAPI_SUCCESS:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tloading: false,\r\n\t\t\t\terror: null,\r\n\t\t\t\titem: action.payload,\r\n\t\t\t};\r\n\t\tcase FETCH_WEATHERAPI_FAILURE:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tloading: false,\r\n\t\t\t\terror: action.error,\r\n\t\t\t\titem: {},\r\n\t\t\t};\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n}\r\n","import { GET_COUNTRY } from '../constants/actionTypes';\r\n\r\nconst initialState = {\r\n\titems: [],\r\n};\r\n\r\nexport default function countryReducer(state = initialState, action) {\r\n\tswitch (action.type) {\r\n\t\tcase GET_COUNTRY:\r\n\t\t\treturn action.payload;\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n}\r\n","import { combineReducers } from 'redux';\r\n\r\nimport weatherReducer from './weather';\r\nimport countryReducer from './countries';\r\n\r\nconst rootReducer = combineReducers({\r\n\tweather: weatherReducer,\r\n\tcountry: countryReducer,\r\n});\r\n\r\nexport default rootReducer;\r\n","import { createStore, applyMiddleware } from 'redux';\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\n\r\nimport rootReducer from '../reduers/rootReducer';\r\n\r\nconst composedEnhancer = composeWithDevTools(applyMiddleware(thunkMiddleware));\r\n\r\nconst store = createStore(rootReducer, composedEnhancer);\r\n\r\nexport default store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport store from './redux/store/store';\n\nReactDOM.render(\n\t<Provider store={store}>\n\t\t<App />\n\t</Provider>,\n\tdocument.getElementById('root')\n);\n"],"sourceRoot":""}